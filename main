#include <iostream>
using namespace std;

class Inmueble {
public:
    Inmueble() {
        direccion = new char[1];
        direccion[0] = '\0';
        numCuartos = -1;
        precio = -1;
    }

    Inmueble(const Inmueble& original) {
        direccion = new char[strlen(original.getDireccion()) + 1];
        strcpy(direccion, original.getDireccion());
        numCuartos = original.getNumCuartos();
        precio = original.getPrecio();
    }

    Inmueble& operator=(const Inmueble& original) {
        if (this != &original) {
            delete[] direccion;
            direccion = new char[strlen(original.getDireccion()) + 1];
            strcpy(direccion, original.getDireccion());
            numCuartos = original.getNumCuartos();
            precio = original.getPrecio();
        }
        return *this;
    }

    ~Inmueble() {
        delete[] direccion;
    }
    char* getDireccion() const {
        return direccion;
    }

    int getNumCuartos() const {
        return numCuartos;
    }

    float getPrecio() const {
        return precio;
    }

    void setNumCuartos(int cuartos) {
        numCuartos = cuartos;
    }

    void setPrecio(float precio) {
        this->precio = precio;
    }

    void setDireccion(char* direccion) {
        delete[] this->direccion;
        this -> direccion = new char[strlen(direccion) + 1];
        strcpy(this->direccion, direccion);
    }
    
    void print() const {
        cout << "Direccion: " << direccion;
        cout << ", Numero de cuartos: " << numCuartos;
        cout << ", Precio: " << precio;
        cout << endl;
    }

private: 
    char* direccion;
    int numCuartos;
    float precio;

    int strlen(const char* string) const {
        int len = 0;
        while (string[len] != '\0') {
            len++;
        }
        return len;
    }

    void strcpy(char* destino, const char* original) const {
        int i = 0;
        while (original[i] != '\0') {
            destino[i] = original[i];
            i++;
        }
        destino[i] = '\0';
    }

}; 

class ListaDeInmuebles {
public:
    ListaDeInmuebles(int size) {
        if (size >=1) {
            this -> size = size;
        }
        Lista = new Inmueble[size];
    }

    // ListaDeInmuebles(ListaDeInmuebles& other) {
    //     size = other.getSize();
    //     Lista = new Inmueble[size];
    //     for (int i = 0; i < size; i++) {
    //         Lista[i] = other.Lista[i];
    //     }
    // }

    ListaDeInmuebles& operator=(const ListaDeInmuebles& other) {
        if (this != &other) {
            size = other.size;
            Inmueble* nuevaLista = new Inmueble[size];

            for (int i = 0; i < size; i++) {
                nuevaLista[i] = other.Lista[i];
            }
            delete[] Lista;
            Lista = nuevaLista;
        }
        return *this;
    }

    ~ListaDeInmuebles() {
        delete[] Lista;
    }

    int getSize() {
        return size; 
    }

    Inmueble& getInmueble(int index) {
        return Lista[index];
    }

    void addInmueble(Inmueble& inmueble) {
        Inmueble* nuevaLista = new Inmueble[size + 1];
        for (int i = 0; i < size; i++) {
            nuevaLista[i] = Lista[i];
        }
        nuevaLista[size] = inmueble;
        delete[] Lista;
        Lista = nuevaLista;
        size++;
    }

    ListaDeInmuebles buscarPorDireccion(char* direccion) {
        ListaDeInmuebles resultado(0);
        for (int i = 0; i < size; i++) {
            if (strcomp(Lista[i].getDireccion(),direccion)) {
                resultado.addInmueble(Lista[i]);
            }
        } 
        return resultado;
    }

    ListaDeInmuebles buscarPorPrecio(float precioMin, float precioMax) {
        ListaDeInmuebles resultado(0);
        for (int i = 0; i < size; i++) {
            float precio = Lista[i].getPrecio();
            if ((precioMin == -1 || precio >= precioMin) && (precioMax == -1 || precio <= precioMax)) {
                resultado.addInmueble(Lista[i]);
            }
        }
        return resultado;
    }

    ListaDeInmuebles buscarPorNumCuartos(int min, int max) {
        ListaDeInmuebles resultado(0);
        for (int i = 0; i < size; i++) {
            int numCuartos = Lista[i].getNumCuartos();
            if ((min == -1 || numCuartos >= min) && (max == -1 || numCuartos <= max)) {
                resultado.addInmueble(Lista[i]);
            }
        }
        return resultado;
    }

    void mostrar() const {
        for (int i = 0; i < size; i++) {
            cout << i + 1 << ". ";
            Lista[i].print();
        }
    }

    

private:
    int size = 0; 
    Inmueble* Lista;

    bool strcomp(char* str1, char* str2) const{
        while (*str1 && *str2 && *str1 ==*str2){
            str1++;
            str2++;
        }
        return *str1 == '\0' && *str2 == '\0';
    }
};

class Cliente {
public: 
    Cliente()
	{
		nombre = new char[1];
        nombre[0] = '\0';
        for(int i=0; i<9; i++)
		{
			dni[i] = '-';
		}
		for(int i=0; i<10; i++)
		{
			telefono[i] = '-';
		}
	}

    Cliente(Cliente &original) {
        nombre = new char[strlen(original.getNombre())+ 1];
        strcpy(nombre,original.getNombre());
        strcpy(dni,original.getDni());
        strcpy(telefono,original.getTelefono());
    }

    Cliente& operator=(Cliente &original) {
        if (this != &original) {
            delete[] nombre;
            nombre = new char[strlen(original.getNombre()) + 1];
            strcpy(nombre,original.getNombre());
            strcpy(dni,original.getDni());
            strcpy(telefono,original.getTelefono());
        }
        return *this;
    }

    ~Cliente() {
        delete[] nombre;
    }

	char* getNombre() const {
		return nombre;
	}

    char* getDni() {
        return dni;
    }

    char* getTelefono() {
        return telefono;
    }

    void setNombre(char* nombre) {
        delete[] this->nombre;
        this->nombre = new char[strlen(nombre) + 1];
        strcpy(this->nombre, nombre);
    }

    void setDni(char* dni) {
        strcpy(this->dni,dni);
    }

    void setTelefono(char* telefono) {
        strcpy(this->telefono,telefono);
    }

    void print() const {
        cout << "Nombre: " << nombre << endl;
        cout << "DNI: " << dni << endl;
        cout << "Telefono: " << telefono << endl;
    }

private: 
    char* nombre{nullptr};
	char dni[9];
	char telefono[10];

    int strlen(const char* string) const {
        int len = 0;
        while (string[len] != '\0') {
            len++;
        }
        return len;
    }

    void strcpy(char* destino, const char* original) const {
        int i = 0;
        while (original[i] != '\0') {
            destino[i] = original[i];
            i++;
        }
        destino[i] = '\0';
    }
};

class ListaDeClientes{
public:
    ListaDeClientes(int size) {
        if (size >= 1) {
            this->size = size;
        }
        Lista = new Cliente[size];
    }

    ListaDeClientes(ListaDeClientes& other) {
        size = other.getSize();
        Lista = new Cliente[size];
        for (int i = 0; i < size; i++) {
            Lista[i] = other.Lista[i];
        }
    }

    ListaDeClientes& operator=(const ListaDeClientes& other) {
        if (this != &other) {
            size = other.size;
            Cliente* nuevaLista = new Cliente[size];

            for (int i = 0; i < size; ++i) {
                nuevaLista[i] = other.Lista[i];
            }

            delete[] Lista;
            Lista = nuevaLista;
        }
        return *this;
    }

    ~ListaDeClientes() {
        delete[] Lista;
    }

    int getSize() {
        return size; 
    }

    Cliente& getCliente(int index) {
        return Lista[index];
    }

    void addCliente (Cliente& cliente) {
        Cliente* nuevaLista= new Cliente[size+1];
        for (int i = 0; i < size; i++) {
            nuevaLista[i] = Lista[i];
        }
        nuevaLista[size] = cliente;
        delete[] Lista;
        Lista = nuevaLista;
        size++;
    }

    ListaDeClientes buscarPorNombre(char* nombre) {
        ListaDeClientes resultado(0);
        for (int i = 0; i < size; i++) {
            if (strcomp(Lista[i].getNombre(), nombre)) {
                resultado.addCliente(Lista[i]);
            }
        }
        return resultado;
    }
    
    ListaDeClientes buscarPorDni(char* dni) {
        ListaDeClientes resultado(0);
        for (int i = 0; i < size; i++) {
            if (strcomp(Lista[i].getDni(), dni)) {
                resultado.addCliente(Lista[i]);
            }
        }
        return resultado;
    }

    ListaDeClientes buscarPorTelefono(char* telefono) {
        ListaDeClientes resultado(0);
        for (int i = 0; i < size; i++) {
            if (strcomp(Lista[i].getTelefono(), telefono)) {
                resultado.addCliente(Lista[i]);
            }
        }
        return resultado;
    }

    void mostrar() const {
        for (int i = 0; i < size; i++){
            cout << i+1 <<". ";
            Lista[i].print();
        }
    }

    

private:
    int size = 0;
    Cliente *Lista;
    
    bool strcomp(char* str1, char* str2) {
        while (*str1 && *str2 && *str1 == *str2){
            str1++;
            str2++;
        }
        return *str1 ==  '\0' && *str2 == '\0';
    }
};

class Propietario {
public: 
    Propietario() 
	{
		nombre = new char [1];
        nombre[0] = '\0';
		for(int i=0; i<9; i++)
		{
			dni[i] = '-';
		}
		for(int i=0; i<10; i++)
		{
			telefono[i] = '-';
		}
	}

    Propietario(Propietario &original) {
        nombre = new char[strlen(original.getNombre())+ 1];
        strcpy(nombre,original.getNombre());
        strcpy(dni,original.getDni());
        strcpy(telefono,original.getTelefono());
    }

    Propietario& operator=(Propietario &original) {
        if (this != &original) {
            delete[] nombre;
            nombre = new char[strlen(original.getNombre()) + 1];
            strcpy(nombre,original.getNombre());
            strcpy(dni,original.getDni());
            strcpy(telefono,original.getTelefono());
        }
        return *this;
    }

    ~Propietario() {
        delete[] nombre;
    }

	char* getNombre () const {
		return nombre;
	}

    char* getDni()  {
        return dni;
    }

     char* getTelefono() {
        return telefono;
    }

    void setNombre(char* nombre) {
        delete[] this->nombre;
        this->nombre = new char[strlen(nombre) + 1];
        strcpy(this->nombre, nombre);
    }

    void setDni(char* dni) {
        strcpy(this->dni,dni);
    }

    void setTelefono(char* telefono) {
        strcpy(this->telefono,telefono);
    }

    void print() const {
        cout << "Nombre: " << nombre << endl;
        cout << "DNI: " << dni << endl;
        cout << "Telefono: " << telefono << endl;
    }

private:
    char* nombre{nullptr};
	char dni[9];
	char telefono[10];

    int strlen(const char* string) const {
        int len = 0;
        while (string[len] != '\0') {
            len++;
        }
        return len;
    }

    void strcpy(char* destino, const char* original) const {
        int i = 0;
        while (original[i] != '\0') {
            destino[i] = original[i];
            i++;
        }
        destino[i] = '\0';
    }
};

class ListaDePropietarios {
public:
    ListaDePropietarios(int size) {
        if (size >= 1) {
            this->size = size;
        }
        Lista = new Propietario[size];
    }
    
    ListaDePropietarios(ListaDePropietarios& other) {
        size = other.getSize();
        Lista = new Propietario[size];
        for (int i = 0; i < size; i++) {
            Lista[i] = other.Lista[i];
        }
    }

    ListaDePropietarios& operator=(const ListaDePropietarios& other) {
        if (this != &other) {
            size = other.size;
            Propietario* nuevaLista = new Propietario[size];

            for (int i = 0; i < size; ++i) {
                nuevaLista[i] = other.Lista[i];
            }

            delete[] Lista;
            Lista = nuevaLista;
        }
        return *this;
    }

    ~ListaDePropietarios() {
        delete[] Lista;
    }

    int getSize() {
        return size; 
    }

    Propietario& getPropietario(int index) {
        return Lista[index];
    }

    ListaDePropietarios buscarPorNombre(char* nombre) {
        ListaDePropietarios resultado(0);
        for (int i = 0; i < size; i++) {
            if (strcomp(Lista[i].getNombre(), nombre)) {
                resultado.addPropietario(Lista[i]);
            }
        }
        return resultado;
    }
    
    ListaDePropietarios buscarPorDni(char* dni) {
        ListaDePropietarios resultado(0);
        for (int i = 0; i < size; i++) {
            if (strcomp(Lista[i].getDni(), dni)) {
                resultado.addPropietario(Lista[i]);
            }
        }
        return resultado;
    }

    ListaDePropietarios buscarPorTelefono(char* telefono) {
        ListaDePropietarios resultado(0);
        for (int i = 0; i < size; i++) {
            if (strcomp(Lista[i].getTelefono(), telefono)) {
                resultado.addPropietario(Lista[i]);
            }
        }
        return resultado;
    }

    void addPropietario (Propietario& propietario) {
        Propietario* nuevaLista= new Propietario[size+1];
        for (int i = 0; i < size; i++) {
            nuevaLista[i] = Lista[i];
        }
        nuevaLista[size] = propietario;
        delete[] Lista;
        Lista = nuevaLista;
        size++;
    }

    void mostrar() const {
        for (int i = 0; i < size; i++){
            cout << i+1 <<". ";
            Lista[i].print();
        }
    }

private:
    int size = 0;
    Propietario *Lista;
    
    bool strcomp(char* str1, char* str2) {
        while (*str1 && *str2 && *str1 == *str2){
            str1++;
            str2++;
        }
        return *str1 ==  '\0' && *str2 == '\0';
    }
};

void menuCliente(ListaDeInmuebles& TodosInmuebles);
void menuPropietario(ListaDeInmuebles& TodosInmuebles);
void guardarInmuebles(ListaDeInmuebles& inmuebles);


int main()
{   
    ListaDeInmuebles TodosInmuebles(0);
    ListaDePropietarios TodosPropietarios(0);
    // ListaDeClientes TodosClientes(0);
    int opcion = 0;
    
    while (opcion != 3) {
        cout << "\n----Menu Principal----\n";
        cout << "1. Cliente" << endl;
        cout << "2. Propietario" << endl;
        cout << "3. Salir" << endl;
        cout << "Como desea ingresar? ";
        cin >> opcion;

        switch (opcion) {
            case 1:
                menuCliente(TodosInmuebles);
                break;
            case 2:
                menuPropietario(TodosInmuebles);
                break;
            case 3:
                cout << "Saliendo ..." << endl;
                break;
            default: 
                cout << "Opcion no valida. Intente de nuevo" << endl;
        }
    }
    

    // cout << "Imprimir todos los inmuebles";
    // TodosInmuebles.mostrar();
    guardarInmuebles(TodosInmuebles);
    return 0;

}

void menuCliente(ListaDeInmuebles& TodosInmuebles) {
    int op = 0;

    while (op != 5) { 
        cout << "\n---- Menu del Cliente ----" << endl;
        cout << "1. Ver todos los inmuebles" << endl;
        cout << "2. Buscar por direccion" << endl;
        cout << "3. Buscar por numero de cuartos" << endl;
        cout << "4. Buscar por precio" << endl;
        cout << "5. Salir" << endl;
        cout << "Selecciona una opcion: ";
        cin >> op;

        
        switch(op) {
            case 1:
                cout << "\nLista de Inmuebles\n";
                TodosInmuebles.mostrar();
                break;
            case 2:
                {
                char direccion[128];
                cout << "Ingrese la direccion a buscar: ";
                cin.ignore();
                cin.getline(direccion, 128);

                ListaDeInmuebles resultado = TodosInmuebles.buscarPorDireccion(direccion);
                cout << "Resultados de la busqueda: " << endl;
                resultado.mostrar();
                break;
                }
            case 3:
                {
                int minCuartos = -1;
                int maxCuartos = -1;
                cout << "Ingrese el numero minimo de cuartos (o -1 para ignorar): ";
                cin >> minCuartos;
                cout << "Ingrese el numero maximo de cuartos (o -1 para ignorar): ";
                cin >> maxCuartos;

                ListaDeInmuebles resultado = TodosInmuebles.buscarPorNumCuartos(minCuartos,maxCuartos);
                cout << "\nResultado de la busqueda: \n";
                resultado.mostrar();
                break;
                }
            case 4:
                {
                float precioMin = -1;
                float precioMax = -1;
                cout << "Ingrese el precio minimo (o -1 para ignorar): ";
                cin >> precioMin;
                cout << "Ingrese el precio maximo (o -1 para ignorar): ";
                cin >> precioMax;
                ListaDeInmuebles resultado = TodosInmuebles.buscarPorPrecio(precioMin,precioMax);
                cout << "\nResultado de la busqueda:\n";
                resultado.mostrar();
                break;
                }
            case 5:
                cout << "Saliendo ..." << endl;
                break;
            default: 
                cout << "opcion no valida";
        }
    }
    
}

void menuPropietario(ListaDeInmuebles& TodosInmuebles) {
    ListaDeInmuebles misInmuebles(0);
    int op = 0;
    
    while (op != 5){
        cout << "\n---- Menu del Propietario ----" << endl;
        cout << "1. Agregar inmuebles" << endl;
        cout << "2. Modificar inmueble" << endl;
        cout << "3. Eliminar inmueble" << endl;
        cout << "4. Mostrar mis inmuebles" << endl;
        cout << "5. Salir" << endl;
        cout << "Selecciona una opcion: ";
        cin >> op;

        switch(op) {
            case 1: 
            {
                int numInmuebles = 0;
                cout << "Inmuebles a ingresar: ";
                cin >> numInmuebles;
                for (int i = 0; i < numInmuebles; i++) {
                    char direccion[100];
                    int numCuartos;
                    float precio;
                    cout << "Ingrese la direccion del inmueble: ";
                    cin.ignore();
                    cin.getline(direccion,100);
                    cout << "Ingrese el numero de cuartos: ";
                    cin >> numCuartos;
                    cout << "Ingrese el precio del inmueble: ";
                    cin >> precio;

                    Inmueble nuevoInmueble;
                    nuevoInmueble.setDireccion(direccion);
                    nuevoInmueble.setNumCuartos(numCuartos);
                    nuevoInmueble.setPrecio(precio);

                    misInmuebles.addInmueble(nuevoInmueble);
                    TodosInmuebles.addInmueble(nuevoInmueble);
                }
                break;
            }
            case 2:
                cout << "Opcion 2";
                break;
            case 3:
                cout << "Opcion 3";
                break;
            case 4:
                cout << "\nMis inmuebles: " << endl; 
                misInmuebles.mostrar();
                break;
            case 5:
                cout << "Saliendo..." << endl;
                break;
            default:
                cout << "Default";
        }
    }
}

void guardarInmuebles(ListaDeInmuebles& inmuebles) {
    FILE* archivo = fopen("inmuebles.txt","w");

    if (archivo != NULL) {
        for (int i = 0; i < inmuebles.getSize(); i++) {
        Inmueble& inmueble = inmuebles.getInmueble(i);
        fprintf(archivo, "%s\n%d\n%f\n\n", inmueble.getDireccion(), inmueble.getNumCuartos(), inmueble.getPrecio());
        }

        fclose(archivo);
    } else {
        cout << "No se pudo abrir 'inmuebles.txt'" << endl;
    }

}
