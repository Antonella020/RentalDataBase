#include <iostream>
using namespace std;

class Inmueble {
public:
    Inmueble() {
        for (int i = 0; i < 128; i++) {
            direccion[i] = '-';
        }
        numCuartos = -1;
        precio = -1;
    }

    char* getDireccion() {
        return direccion;
    }

    int getNumCuartos() {
        return numCuartos;
    }

    float getPrecio() {
        return precio;
    }

    void setNumCuartos(int cuartosInmueble) {
        numCuartos = cuartosInmueble; 
    }

    void setPrecio(float precioInmueble) {
        precio = precioInmueble;
    }

    void setDireccion(char* ptrDireccionInmueble) {
        char* ptrDireccion = direccion;
        while (*ptrDireccionInmueble != '\0') {
            *ptrDireccion = *ptrDireccionInmueble;
            ptrDireccion++;
            ptrDireccionInmueble++;
        }
        *ptrDireccion = '\0';
    }
    


private: 
    char direccion[128];
    int numCuartos;
    float precio;


}; 

class Cliente {
public: 
    Cliente()
	{
		for(int i=0; i<128; i++)
		{
			nombre[i] ='-';
		}
		for(int i=0; i<9; i++)
		{
			dni[i] = '-';
		}
		for(int i=0; i<10; i++)
		{
			telefono[i] = '-';
		}
	}

	char* getNombre()  {
		return nombre;
	}

    char* getDni() {
        return dni;
    }

    char* getTelefono() {
        return telefono;
    }

    void setNombre(char* ptrNombreCliente) {
        char* ptrNombre = nombre;
        while (*ptrNombreCliente != '\0') {
            *ptrNombre = *ptrNombreCliente;
            ptrNombre++;
            ptrNombreCliente++;
        }
        *ptrNombre = '\0';
    }

    void setDni(char* ptrDniCliente) {
        char* ptrDni = dni;
        while (*ptrDniCliente != '\0') {
            *ptrDni = *ptrDniCliente;
            ptrDni++;
            ptrDniCliente++;
        }
        *ptrDni = '\0';
    }

    void setTelefono(char* ptrTelefonoCliente) {
        char* ptrTelefono = telefono;  
        while (*ptrTelefonoCliente != '\0') {
            *ptrTelefono = *ptrTelefonoCliente;
            ptrTelefono++; 
            ptrTelefonoCliente++;
        }
        *ptrTelefono = '\0';
    }

private: 
    char nombre[128];
	char dni[9];
	char telefono[10];
};

class Propietario {
public: 
    Propietario() 
	{
		nombre = new char [1];
        nombre[0] = '\0';
		for(int i=0; i<9; i++)
		{
			dni[i] = '-';
		}
		for(int i=0; i<10; i++)
		{
			telefono[i] = '-';
		}
	}

    Propietario(Propietario &original) { // Copy constructor
        nombre = new char[strlen(original.getNombre() + 1)];
        strcpy(nombre,original.getNombre());
        strcpy(dni,original.getDni());
        strcpy(telefono,original.getTelefono());
    }

    Propietario& operator=(Propietario &original) { // asssignment operator
        if (this != &original) {
            delete[] nombre;
            nombre = new char[strlen(original.getNombre() + 1)];
            strcpy(nombre,original.getNombre());
            strcpy(dni,original.getDni());
            strcpy(telefono,original.getTelefono());
        }

        return *this;
    }

    ~Propietario() {
        delete[] nombre;
    }

	char* getNombre ()   {
		return nombre;
	}

    char* getDni()  {
        return dni;
    }

     char* getTelefono()  {
        return telefono;
    }

    void setNombre(char* nombre) {
        delete[] this->nombre;
        this->nombre = new char[strlen(nombre)];
        strcpy(this->nombre, nombre);
    }

    void setDni(char* dni) {
        strcpy(this->dni,dni);
    }

    void setTelefono(char* telefono) {
        strcpy(this->telefono,telefono);
    }

private:
    char* nombre{nullptr};
	char dni[9];
	char telefono[10];

    int strlen(const char* string) const {
        int len = 0;
        while (string[len] != '\0') {
            len++;
        }
        return len;
    }

    void strcpy(char* destino, const char* original) const {
        int i = 0;
        while (original[i] != '\0') {
            destino[i] = original[i];
            i++;
        }
        destino[i] = '\0';
    }
};

class ListaDePropietarios {
public:
    ListaDePropietarios(int size) { // Constructor por defecto
        if (size >= 1) {
            this->size = size;
        }
        Lista = new Propietario[size];
    }
    ~ListaDePropietarios() { // Destructor
        delete[] Lista;
    }

    ListaDePropietarios& operator=(const ListaDePropietarios& other) { 
        if (this != &other) {
            size = other.size;
            Propietario* nuevaLista = new Propietario[size];

            for (int i = 0; i < size; ++i) {
                nuevaLista[i] = other.Lista[i];
            }

            delete[] Lista;
            Lista = nuevaLista;
        }
        return *this;
    }

    ListaDePropietarios buscarPorNombre(char* nombre) {
        ListaDePropietarios resultado(0);
        for (int i = 0; i < size; i++) {
            if (strcomp(Lista[i].getNombre(), nombre)) {
                resultado.addPropietario(Lista[i]);
            }
        }
        return resultado;
    }
    
    ListaDePropietarios buscarPorDni(char* dni) {
        ListaDePropietarios resultado(0);
        for (int i = 0; i < size; i++) {
            if (strcomp(Lista[i].getDni(), dni)) {
                resultado.addPropietario(Lista[i]);
            }
        }
        return resultado;
    }

    ListaDePropietarios buscarPorTelefono(char* telefono) {
        ListaDePropietarios resultado(0);
        for (int i = 0; i < size; i++) {
            if (strcomp(Lista[i].getTelefono(), telefono)) {
                resultado.addPropietario(Lista[i]);
            }
        }
        return resultado;
    }

    void addPropietario (Propietario& propietario) {
        Propietario* nuevaLista= new Propietario[size+1];
        for (int i = 0; i < size; i++) {
            nuevaLista[i] = Lista[i];
        }
        nuevaLista[size] = propietario;
        delete[] Lista;
        Lista = nuevaLista;
        size++;
    }

    void imprimirLista() {
        for (int i = 0; i < size; i++){
            Propietario* propietarioPtr = &Lista[i];
            cout << i+1 <<". ";
            cout << "Nombre: " << propietarioPtr->getNombre();
            cout << ", DNI: " << propietarioPtr->getDni();
            cout << ", Telefono: " << propietarioPtr->getTelefono() << endl;
        }
    }
private:
    int size = 0;
    Propietario *Lista;
    
    bool strcomp(char* str1, char* str2) { // True si son iguales
        while (*str1 && *str2 && *str1 == *str2){
            str1++;
            str2++;
        }
        return *str1 ==  '\0' && *str2 == '\0';
    }

    int getSize() {
        return size; 
    }

    Propietario& getPropietario(int index) {
        return Lista[index];
    }

    
};

int main()
{
    Cliente cliente1;
    cliente1.setNombre("AAAA");
    cliente1.setDni("71125134");
    cliente1.setTelefono("923592092");

    cout << "cliente1.getNombre() = " << cliente1.getNombre() << endl;
    cout << "cliente1.getDni() = " << cliente1.getDni() << endl;
    cout << "cliente1.getTelefono() = " << cliente1.getTelefono() << endl; 
    cout << endl; 

    Inmueble inmueble1;
    inmueble1.setNumCuartos(20);
    inmueble1.setPrecio(350.50);
    inmueble1.setDireccion("Urb. ABC - 23");
    cout << "inmueble1.getDireccion() = " << inmueble1.getDireccion() << endl;
    cout << "inmueble1.getNumCuartos() = " << inmueble1.getNumCuartos() << endl;
    cout << "inmueble1.getPrecio() = " << inmueble1.getPrecio() << endl;
    cout << endl;


    cout << "PROPIETARIO 1" << endl;
    Propietario propietario1;
    propietario1.setDni("12345678");
    propietario1.setNombre("Juan");
    propietario1.setTelefono("123456789");
    
    cout << "propietario1.getDni() = " << propietario1.getDni() << endl;
    cout << "propietario1.getNombre() = " << propietario1.getNombre() << endl;
    cout << "propietario1.getTelefono() = " << propietario1.getTelefono() << endl; 
	cout << endl;

    cout << "PROPIETARIO 2"<< endl;
    Propietario propietario2;
    propietario2.setDni("87654321");
    propietario2.setNombre("Juan");
    propietario2.setTelefono("0987654321");

    cout << "propietario2.getDni() = " << propietario2.getDni() << endl;
    cout << "propietario2.getNombre() = " << propietario2.getNombre() << endl;
    cout << "propietario2.getTelefono() = " << propietario2.getTelefono() << endl; 
	cout << endl;
    
    
    ListaDePropietarios Todos(0);
    Todos.addPropietario(propietario1);
    Todos.addPropietario(propietario2);

    cout << "Todos: " << endl;
    Todos.imprimirLista();
	cout << endl;

    // cout << endl << "Buscar por nombre 'Juan': " << endl;
    // ListaDePropietarios ConsultaNombre = Todos.buscarPorNombre("Juan");
    // ConsultaNombre.imprimirLista();

    // cout << endl << "Bucar por DNI '87654321': " << endl;
    // ListaDePropietarios ConsultaDni = ConsultaNombre.buscarPorDni("87654321");
    // ConsultaDni.imprimirLista();

    // cout << "Buscar por Nombre y Dni" << endl;
    // Todos.buscarPorNombre("Juan").buscarPorDni("87654321").imprimirLista();

    cout << "ReConsulta" << endl;
    ListaDePropietarios consulta = Todos.buscarPorNombre("Juan");
    consulta = consulta.buscarPorDni("87654321");
    consulta.imprimirLista();
	return 0; 

}
